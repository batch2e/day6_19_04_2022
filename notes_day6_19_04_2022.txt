



Q Enter 10 numbers and perform addition of those 10 numbers.

 Writing a code following procedural approach.


 int main(){
   int num[10];
   int ctr;
   for(ctr=0;ctr<10;ctr++){
   }
  }
   
Observation:
* main is not within a class. 

Q Can we have exactly same kind of code in java(without a class)?
A No. We have to write the main within a class.

class Main1{
   public static void main(String args[]) {
    int num[]=new int[10];
    int sum=0;
    Scanner scan=new Scanner(System.in);
    for(int i=0;i<num.length;i++){
     System.out.println("Enter the number");
     num[i]=scan.nextInt();
     sum+=num[i];
    }
    System.out.println(sum);
  }
}
Observations:-
* main method is within a class and that is mandatory in java.
* We have worked with local variables/objects. Local variables are those which are created in a block scope. Like num, sum,i
  and scan which is an object of class Scanner. So main is the method and all the mentioned variables and objects are local to main.

Q Can I write this logic of adding numbers in a separate method other than main?
A Yes. S

class Main2{

   public static int add(int n[]){
     int sum=0;
   for(int i=0;i<n.length;i++){
       sum+=n[i];
     }
     return sum;    

   }

   public static void main(String args[]) {
    //int num[]={11,15,23,45,67,89,80};
    int num[]=new int[10];
    
    Scanner scan=new Scanner(System.in);
   for(int i=0;i<num.length;i++){
     System.out.println("Enter the number");
     num[i]=scan.nextInt();

    }
     int sm=add(num);
    System.out.println(sm);
    // System.out.println(add(num));
  }
}
 
So why in the above code add is again a static method. 
Ans : A static method can call only other static method without the object. 
Observations:
* int num[] is local to main method.
* scan is local to main method.
* i is local to main method.
* sm is local to main method.
* int n[] parameter is local to add method.
* sum is local to add method.
-----------------------------------------------------------------------------------------------------------  
-------------------------------------------------------------------------------------------------------------------------
Q Can we implement the above code by planning with Object oriented approach where we will declare the num array and sum 
as instance variables and that too in a single class and we wont be making the add method as static.
A Yes

class Main3{
  private int num[];
  private int sum;

 public void setNum(int num[])
  {
     this.num=num;
  }

 public int add(){
   
    for(int i=0;i<num.length;i++){
       sum+=num[i];
     }
     return sum;   
   }

public static void main(String args[]) {
    Main3 m=new Main3();
    int num[]=new int[10];
    Scanner scan=new Scanner(System.in);
   for(int i=0;i<num.length;i++){
     System.out.println("Enter the number");
     num[i]=scan.nextInt();

    }
     m.setNum(num);
     int sm=m.add();
    System.out.println(sm);
  }

}
As in the above code add is non static we need to create an object of the class where add is and then we can access add
with the object reference.
Observations:
* add is non static.
* setNum is non static.
* setNum is with array as a parameter.
* num is local to main
* another num is an instance variable of class Main3.
* sum is an instance variable of class Main3.
* sm is local to main method.
* i is local to main method.
* i is local to add method also.
* int num[] local to setNum method.
* sum is not initialised with 0 explicitly. The default constructor will initialise sum with the value 0.

-------------------------------------------------------------------------------------------------------------
Q Can we have two separate classes, one for the logic with number and another having the main method and that too in different files?
A Yes

Number.java

public class Number{
  private int num[];
  private int sum;

 public void setNum(int num[])
  {
     this.num=num;
  }

 public int add(){
   
    for(int i=0;i<num.length;i++){
       sum+=num[i];
     }
     return sum;   
   }
}


Main4.java
public class Main4 {
public static void main(String args[]) {
    Number number=new Number();
    int num[]=new int[10];
    Scanner scan=new Scanner(System.in);
   for(int i=0;i<num.length;i++){
     System.out.println("Enter the number");
     num[i]=scan.nextInt();

    }
     number.setNum(num);
     int sm=number.add();
    System.out.println(sm);
  }

}
The above code is with two different classes and that too by following the object oriented concept.
Observations:
* int num[] in 3 places. local to main method. local to setNum method as a parameter and as instance variable of class Number.
* sm,i,scan are local to main method.
* sum is an instance variable of class Number. i is local variable to method add. 
------------------------------------------------------------------------------------------------------------

Write a code to find out the minimum number out of the 10 numbers.

public class Numbers{
      private int num[];
      private int min;
	public int[] getNum() {
		return num;
	}
	public void setNum(int[] num) {
		this.num = num;
	}
	public int getMin() {
		min=num[0];
		for(int i=0;i<num.length;i++)
		{
			if(num[i]<min)
			{
				min=num[i];
			}
		}
		return min;
	}

   //setter/getters

   

 public class NumbersMain{
    public static void main(String[] args){
    int num[]={100,2,2,4,8,20,30,67,9,10};
    Numbers numbers=new Numbers();
    numbers.setNum(num);
    int min=numbers.getMin();
    System.out.println("The numbers are");
    num=numbers.getNum();
    for(int n : num)
    {
    	System.out.println(n);
    }
    
    System.out.println("The minimum value "+min);
   }
  }
 
Output
-2

------------------------------------------------------------------

class Customer {
	private String customerId;
	private String customerName;
	private long contactNumber;
	private String address;

	public Customer(String customerId, String customerName, long contactNumber,
			String address) {
		this.customerId = customerId;
		this.customerName = customerName;
		this.contactNumber = contactNumber;
		this.address = address;
	}
	public String getCustomerId() {
		return customerId;
	}
	public void setCustomerId(String customerId) {
		this.customerId = customerId;
	}
	public String getCustomerName() {
		return customerName;
	}
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
	public long getContactNumber() {
		return contactNumber;
	}
	public void setContactNumber(long contactNumber) {
		this.contactNumber = contactNumber;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***********");
		System.out.println("Customer Id : " + customerId);
		System.out.println("Customer Name : " + customerName);
		System.out.println("Contact Number : " + contactNumber);
		System.out.println("Address : " + address);
		System.out.println();
	}
	public double payBill(double totalPrice) {
		double discountPercentage = 5;
		System.out.println("Calculating final amount to be paid.....");
		double priceAfterDiscount = totalPrice * (1 - (discountPercentage / 100));
		return priceAfterDiscount;
	}
}
public class Tester {
	public static void main(String[] args) {
		Customer customer1 = new Customer("C1001", "Sam", 9945000009L,
				"Carolina Street, Springfield, 62702");
		System.out.println("Final amount to be paid: $" +customer1.payBill(20));
	}
}

//Q In the above example total price and discount price is taken local to the payBill method. Why so? They are not being taken 
as instance variables.
//A) You will get your answer if you can think what are attributes or properties of a customer through which we identify a Customer.
 
Q Do you think a Customer is being identified with an attribute called totalPrice and discount?
A) No. A customer can be identified with customer id, name, address , phone number but we never identify an attribute called
  total price or discount on Price for a Customer. That is the reason we have not taken totalPrice and discount as a member of the
  class.

--------------------------------------------------
Q We have a book class with bookId, desc, price , author name. We have to use Scanner for taking user input in setData method
within the Book class. So what do you think Scanner should be an instance variable or local object to setData() method.

public class Book {
   private int bookId;
   private String desc;
  // private Scanner scan;
   private float price;
}

We dont identify a Book with an attribute called Scanner. Scanner is a class whose object is used for a purpose. The purpose is
to take user input. So we should take Scanner object local to the method which is responsible for taking user input.
------------------------------------------------------------------------------------------------------------------------------------


class Customer {
	private String customerId;
	private String customerName;
	private long contactNumber;
	private String address;
        private float deliveryCharge;

	public Customer(String customerId, String customerName, long contactNumber,
			String address) {
		this.customerId = customerId;
		this.customerName = customerName;
		this.contactNumber = contactNumber;
		this.address = address;
                deliveryCharge=1.5f;
	}
	public String getCustomerId() {
		return customerId;
	}
	public void setCustomerId(String customerId) {
		this.customerId = customerId;
	}
	public String getCustomerName() {
		return customerName;
	}
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
	public long getContactNumber() {
		return contactNumber;
	}
	public void setContactNumber(long contactNumber) {
		this.contactNumber = contactNumber;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***********");
		System.out.println("Customer Id : " + customerId);
		System.out.println("Customer Name : " + customerName);
		System.out.println("Contact Number : " + contactNumber);
		System.out.println("Address : " + address);
		System.out.println();
	}
	public double payBill(double totalPrice) {
		double discountPercentage = 5;
		System.out.println("Calculating final amount to be paid.....");
		double priceAfterDiscount = totalPrice * (1 - (discountPercentage / 100));
		return priceAfterDiscount;
	}
}
public class Tester {
	public static void main(String[] args) {
		Customer customer1 = new Customer("C1001", "Sam", 9945000009L,
				"Carolina Street, Springfield, 62702");
		System.out.println("Final amount to be paid: $" +customer1.payBill(20));
	}
}
// So we want to have delivery charge but that charge is fixed for all the customers.
// So instead of setting the value through parameterized constructor or through setter method, we can initialise with the
 constant value within the constructor.

// Requirement is we need to have same value for deliveryCharge. So instead of separate copies for the objects, we are going to
// maintain a single copy of deliveryCharge. 

So how it is possible to have a single copy of an object or a variable?
A Declare that object or variable as static.

class Customer {
	private String customerId;
	private String customerName;
	private long contactNumber;
	private String address;
        private static float deliveryCharge;

	public Customer(String customerId, String customerName, long contactNumber,
			String address) {
		this.customerId = customerId;
		this.customerName = customerName;
		this.contactNumber = contactNumber;
		this.address = address;
                deliveryCharge=1.5f;
	}
	public String getCustomerId() {
		return customerId;
	}
	public void setCustomerId(String customerId) {
		this.customerId = customerId;
	}
	public String getCustomerName() {
		return customerName;
	}
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
	public long getContactNumber() {
		return contactNumber;
	}
	public void setContactNumber(long contactNumber) {
		this.contactNumber = contactNumber;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***********");
		System.out.println("Customer Id : " + customerId);
		System.out.println("Customer Name : " + customerName);
		System.out.println("Contact Number : " + contactNumber);
		System.out.println("Address : " + address);
		System.out.println();
	}
	public double payBill(double totalPrice) {
		double discountPercentage = 5;
		System.out.println("Calculating final amount to be paid.....");
		double priceAfterDiscount = totalPrice * (1 - (discountPercentage / 100));
		return priceAfterDiscount;
	}
}
public class Tester {
	public static void main(String[] args) {
		Customer customer1 = new Customer("C1001", "Sam", 9945000009L,
				"Carolina Street, Springfield, 62702");
		System.out.println("Final amount to be paid: $" +customer1.payBill(20));
	}
}
  
  So if the member variable is non static , then we have separate copies for each object but when it is static we 
  have single copy of the variable which can be accessed by any object of the same class. 



To create a static member variable, precede its declaration with the keyword static. When a member is declared static, it can be accessed before any object of the class is created and without reference to any object. 


public class Numbers2 {
  int num;
  static int staticNum=10;
 
}


public class NumbersMain2 {

	public static void main(String[] args) {
	// A static member can be accessed with the
		// class we dont require an object to 
		// access a static member
		System.out.println(Numbers2.staticNum);
   // A non static member cannot be access with the 
   // class , for accessing a non static member
	// we have create the object of the class
	// which is having the non static member
		
		// System.out.println(Numbers2.num);
	   Numbers2 number=new Numbers2();
	   System.out.println(number.num);
	}

}
// An object can also of static. It is not only the primitive type.
// We have only one copy of static member. 


---------------------





public class Numbers3{
 int num;
static int staticNum;

static{
 staticNum=100;
}
 
}


public class NumbersMain3 {

	public static void main(String[] args) {
	// A static member can be initialised at
	// the place of declaration
	// static int num=10;
	// another way is thru static block
   // static {
		   //num=10;
		//}
		System.out.println(Numbers3.staticNum);
        Numbers3.staticNum=1000;
        System.out.println(Numbers3.staticNum);
		// System.out.println(Numbers2.num);
	   Numbers3 number=new Numbers3();
	   System.out.println(number.num);
	}

}

---------------------------------------------------------------------------------------------------------------------------------

public class Numbers4{
 int num;
static int staticNum;

static{
 staticNum=100;
 System.out.println("static block is called");
}
 
Numbers4(int num, int num2){
  this.num=num;
  this.staticNum=num2;
  System.out.println("I am the parameterized constructor");
}

void dispData(){
  System.out.println(num);
  System.out.println(staticNum);
}
}


public class NumbersMain4{
    public static void main(String args[]) {
      Numbers4 num1=new Numbers4(1,200);
      Numbers4 num2=new Numbers4(2,300);
      num1.dispData();
      num2.dispData();
    }
 }

-----------------------------------------------------
Q How we can access the static variables with methods?
A we can access them with static method( Which we usually do but static variables can be accessed through non static methods also)


public class Numbers5{
 int num;
static int staticNum;

static{
 staticNum=100;
 System.out.println("static block is called");
}
 
Numbers5(int num, int num2){
  this.num=num;
  this.staticNum=num2;
  System.out.println("I am the parameterized constructor");
}

void dispData(){
  System.out.println(num);
  System.out.println(staticNum);
}
}


public class NumbersMain5{
    public static void main(String args[]) {
      Numbers5 num1=new Numbers5(1,200);
      Numbers5 num2=new Numbers5(2,300);
      num1.dispData();
      num2.dispData();
    }
 }
// In the above example dispData is a non static method and it is accessing the static and non static members.

Q Can a static method access a non static variable and static variable?
A a static method can access a static member but to access non static member, we have to create the object the object of
the class which is having the non static member.


public class Numbers6{
 int num;
static int staticNum;

static{
 staticNum=100;
 System.out.println("static block is called");
}
 
Numbers6(int num, int num2){
  this.num=num;
  this.staticNum=num2;
  System.out.println("I am the parameterized constructor");
}

void dispData(){
  System.out.println(num);
  //System.out.println(staticNum);
}

static void dispStaticData(){
  //System.out.println(num);
  // Number6 number=new Number6();
  //System.out.println(number.num);
   System.out.println(staticNum);
}

}


public class NumbersMain6{
    public static void main(String args[]) {
      Numbers6 num1=new Numbers6(1,200);
      Numbers6 num2=new Numbers6(2,300);
      num1.dispData();
      num2.dispData();
      Numbers6.dispStatic();
    }
 }

// In the above example non static method dispData() can access both static and non static member but it is good to 
access non static member from a non static method.
// A static method cannot access a non static member until unless we create an object of the class , In our example we
// created an object of the class Number6 in dispStaticData() method which is a static method and accessed the non static
variable.
---------------------------------------------------------------------------------------------------------------------------
Points for static members:
* a method and member variable can be declared as static.
* outer class cannot be declared as static.
  The below declaration is not possible  
   public static class Data{}
* The inner class can be a static class.
   public class Data{
     public static class Data2{}
    }
* static block is used to initialise static member variable of a class.
* static variable can be of primitive or of reference type.
* static block is called once.
* static method can access any other static method or static variable.
* static method can access non static member after creating the object of the class where the non static member is declared.
* non static method can access both static and non static member. 
* Though static member can be accessed with object but we should access static member with the class name.
--------------------------------------------------------------------------------------------------------------------------
Create a code to count the number of objects created.
  public class Customer {
   private int id;
   private String name;
   private String address;
   private static int count;

      public Customer(){
       count++;
      }

      public static int countObject(){
       return count;
      }
   }

  public class CustomerMain{

    public static void main(String args[]){
     Customer cust=new Customer();
     Customer cust2=new Customer();
     System.out.println(Customer.countObject()); //2
     Customer cust3=new Customer();
     System.out.println(Customer.countObject()); //3
   }
 }
  // the static members get the default value if not initialised. So in the above example count gets the initial value of 0
as it is of int type.
------------------------------------------------------------------------------------------------------------------------

The first relationship that you will see is Aggregation which is also known as Has-a relationship. This kind of relationship exists between two classes when a reference variable of one class is a member variable in another class. Consider the below examples. 


public class Department {
private int deptId;
private String deptName;
private Employee manager;
public int getDeptId() {
	return deptId;
}
public void setDeptId(int deptId) {
	this.deptId = deptId;
}
public String getDeptName() {
	return deptName;
}
public void setDeptName(String deptName) {
	this.deptName = deptName;
}
public Employee getManager() {
	return manager;
}
public void setManager(Employee manager) {
	this.manager = manager;
}

}


}

public class Employee {
private int id;
private String name;
private String number;
private String address;
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getNumber() {
	return number;
}
public void setNumber(String number) {
	this.number = number;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}

}

public class DepartmentEmpMain {

	public static void main(String[] args) {
	 Employee emp=new Employee();
	 Department dept=new Department();
	 
	 emp.setId(111);   // int
	 emp.setName("Naveen");   // String
	 emp.setNumber("98765454353");   // String
	 emp.setAddress("A/122 , Chennai");   // String
	 
	 
	 
	 dept.setDeptId(1);  // int
	 dept.setDeptName("HR");  // String
	 
	 dept.setManager(emp); // It is an address of Employee object   
	 
	 System.out.println(dept.getDeptId());   // int
	 System.out.println(dept.getDeptName());  // String
	 //System.out.println(dept.getManager());
	 Employee emp1=dept.getManager();        // Employee
	 System.out.println(emp1.getId());      // int
	 System.out.println(emp1.getName());    // String
	 System.out.println(emp1.getAddress());   // String
       // System.out.println(dept.getManager().getId());
       // System.out.println(dept.getManager().getName());
       // System.out.println(dept.getManager().getAddress());
	}

}

------------------------------------------------------------------------------------------------------------

  Design two classes Person and Name

  Person class will be having age and name
  Name class will have firstName, middleName and lastName  

   age====>int
   name===>Name( It will be a user defined class)
   firstName===> String
   middleName===> String
   lastName=====> String


  public class Name {}
  public class Person {}
  public class PersonMain {
   public static void main(String[] args){
 
   }
  }
   
---------------------------------------------------------------------------------------------------------
